using System;

namespace Server.Common.Security
{
    public class PasswordEncrypt
    {
        private int Length;
        private char[] Result = new char[0];
        public static char[] Data2;
        private int Position = 0;
        private int ResultPosition = 0;
        private int Password;

        public PasswordEncrypt(int ps)
        {
            this.Password = ps;
        }

        public string encrypt(string Password, char[] EncryptPassword)
        {
            int EncryptResult = 0;
            Length = Password.Length;
            char[] PasswordChar = Password.ToCharArray();
            Array.Resize(ref PasswordChar, 256);
            Array.Resize(ref EncryptPassword, 256);
            Array.Resize(ref Data2 , 256);
            Array.Copy(PasswordChar, Data2, Length);
            if (Length > 0)
            {
                do
                {
                    int data = Convert.ToInt32(Data2[Position]) | Convert.ToInt32(Data2[Position + 1]) << 8 | Convert.ToInt32(Data2[Position + 2]) << 16 | Convert.ToInt32(Data2[Position + 3]) << 24;
                    EncryptResult = encrypt((uint)(this.Password + data), 1);
                    encrypt2((uint)EncryptResult);
                    Position += 4;
                    ResultPosition += 7;
                } while (Position < Length);
                if (EncryptPassword != null)
                {
                    for (int i = 1; i < 256 - Length; i++)
                        Data2[Length + i] = EncryptPassword[Length + i];
                }
            }
            return new string(Result);
        }

        private int encrypt(uint data, int mode)
        {
            byte[] key = {
                0x1A, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
                0x0A, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
                0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00,
                0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
                0x1C, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
                0x04, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,
                0x1B, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
                0x15, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
                0x07, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x19, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
                0x1D, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
                0x0F, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
                0x1B, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00,
                0x03, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
                0x0E, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00,
                0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
                0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
                0x1C, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
                0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
                0x0C, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00 };
            int result = 0;
            uint v2 = 0;
            v2 = data;
            int v6 = 0;
            if (data > 0)
            {
                int position = 0;
                do
                {
                    uint v5 = v2 - (v2 & 0xFFFFFFFE);
                    v2 = v2 >> 1;
                    if (v5 > 0)
                    {
                        v6 = key[position];
                        result = (int)(result + (v5 << v6));
                    }
                    position += 4;
                } while (v2 > 0);
            }
            return result;
        }


        private void encrypt2(uint a1)
        {
            uint v2, temp, temp2, temp3;
            char[] table = new char[36];
            "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".CopyTo(0, table, 0, 36);

            Array.Resize(ref Result, Result.Length + 7);

            Result[0 + ResultPosition] = table[a1 % 0x24];
            v2 = a1 / 0x24 / 0x24;
            Result[1 + ResultPosition] = table[a1 / 0x24 % 0x24];
            temp = v2;
            v2 /= 0x24;
            Result[2 + ResultPosition] = table[temp - 36 * v2];
            temp2 = v2;
            v2 /= 0x24;
            Result[3 + ResultPosition] = table[temp2 - 36 * v2];
            temp3 = v2;
            v2 /= 0x24;
            Result[4 + ResultPosition] = table[temp3 - 36 * v2];
            Result[5 + ResultPosition] = table[v2 % 0x24];
            Result[6 + ResultPosition] = table[v2 / 0x24 % 0x24];
        }
    }
}
